# Settings in the [build] context are global and are applied to
# all contexts unless otherwise overridden by more specific contexts.
[build]
  # Directory to change to before starting a build.
  # This is where we will look for package.json/.nvmrc/etc.
  # If not set, defaults to the root directory.
  base = "/"

  # Directory that contains the deploy-ready HTML files and
  # assets generated by the build. This is relative to the base
  # directory if one has been set, or the root directory if
  # a base has not been set. This sample publishes the directory
  # located at the absolute path "root/project/build-output"

  publish = "build/"

  # Default build command.
  command = "echo 'default context'"
[context.production]
  publish = "build/"
  command = "echo 'hello'"
  environment = { NODE_VERSION = "14.15.3" }

# Deploy Preview context: all deploys generated from
# a pull/merge request will inherit these settings.
[context.deploy-preview]
  publish = "dist/"

# Here is an example of how to define context-specific
# environment variables. Be mindful when using this
# option and avoid committing sensitive values to public
# source repositories.
[context.deploy-preview.environment]
  NOT_PRIVATE_ITEM = "not so secret"

# Branch Deploy context: all deploys that are not from
# a pull/merge request or from the Production branch
# will inherit these settings.
[context.branch-deploy]
  command = "echo branch"
[context.branch-deploy.environment]
  NODE_ENV = "development"

# Dev context: environment variables set here 
# are available for local development environments 
# run using Netlify Dev. These values can be 
# overwritten on branches that have a more specific 
# branch context configured.
[context.dev.environment]
  ENV = "development"

# Redirects and headers are GLOBAL for all builds – they do not
# get scoped to contexts no matter where you define them in the file.
# For context-specific rules, use _headers or _redirects files,
# which are PER-DEPLOY.

# A basic redirect rule
# [[redirects]]
#   from = "/api"
#   to = "/blog/:splat"

# A redirect rule with many of the supported properties
# [[redirects]]
#   from = "/old-path"
#   to = "/new-path"
#   status = 302
#   # By default, redirects won’t be applied if there’s a file
#   # with the same path as the one defined in the `from` property.
#   # Setting `force` to `true` will make the redirect rule
#   # take precedence over any existing files.
#   force = true
#   # Redirect from /old-path?id=123 to /new-path.
#   # Each combination of query params needs to be
#   # defined in a separate [[redirects]] block.
#   # More information at https://docs.netlify.com/routing/redirects/redirect-options/#query-parameters
#   query = {id = ":id"}

#   # Redirect based on conditions including browser language,
#   # geolocation, identity role, and/or cookie presence.
#   conditions = {Language = ["en"], Country = ["US"]}

#   # Sign each request with a value defined in an environment variable
#   signed = "API_SIGNATURE_TOKEN"

#   # You can also define custom headers within your redirects blocks.
#   [redirects.headers]
#     X-From = "Netlify"
#     X-Api-Key = "some-api-key-string"

# Redirects for role-based access control don’t use the 'to' property.
[[redirects]]
  from = "/gated-path"
  status = 200
  conditions = {Role = ["admin"]}
  force = true

# The following redirect is intended for use with most SPAs
# that handle routing internally.
# [[redirects]]
#   from = "/*"
#   to = "/index.html"
#   status = 200

[functions]
  # Directory with serverless functions, including background
  # functions, to deploy. This is relative to the base directory
  # if one has been set, or the root directory if
  # a base hasn’t been set.
  directory = "functions/"

# Use [dev] to set configuration overrides for local 
# development environments run using Netlify Dev - except 
# for environment variables. Environment variables for Netlify 
# Dev should be set under [context.dev.environment] instead.
[dev]
  command = "echo 'hello 2'"
  port = 1234
  publish = "dist"
